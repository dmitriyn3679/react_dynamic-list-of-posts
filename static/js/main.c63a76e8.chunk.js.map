{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/users.ts","api/posts.ts","api/comments.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectPost","selectedPost","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","createComment","loadingNewComment","useState","isSubmitted","setIsSubmitted","name","setName","email","setEmail","commentText","setCommentText","nameFieldError","length","emailFieldError","commentTextFieldError","formIsValid","onSubmit","event","preventDefault","htmlFor","placeholder","value","onChange","target","PostDetails","comments","loadingComments","commentsLoadingError","formIsVisible","showForm","removeComment","deletingCommentsID","body","comment","includes","href","UserSelector","users","onSelect","selectedUser","fetchPosts","usersIsLoaded","showUsers","setShowUsers","currentValue","disabled","role","user","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","getUsers","getPosts","userId","getComments","postId","deleteComment","commentId","App","setUsers","setPosts","setComments","loadingPosts","setLoadingPosts","setLoadingComments","setLoadingNewComment","setDeletingCommentsID","postsLoadingError","setPostsLoadingError","setCommentsLoadingError","setSelectedUser","setSelectedPost","setFormIsVisible","useEffect","a","loadedUsers","fetchUsers","loadedPosts","fetchComments","loadedComments","newComment","responseComment","parse","addedComment","current","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c63a76e8.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectPost: (post: Post) => void;\n  selectedPost: Post | null;\n};\n\nexport const PostsList: React.FC<Props> = (\n  { posts, selectPost, selectedPost },\n) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr key={post.id} data-cy=\"Post\">\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button is-link',\n                  { 'is-light': selectedPost !== post },\n                )}\n                onClick={() => selectPost(post)}\n              >\n                {post === selectedPost ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  createComment: (name: string, email: string, commentText: string) => void;\n  loadingNewComment: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = (\n  { createComment, loadingNewComment },\n) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n\n  const nameFieldError = isSubmitted && !name.length;\n  const emailFieldError = isSubmitted && !email.length;\n  const commentTextFieldError = isSubmitted && !commentText.length;\n\n  const formIsValid = name.length && email.length && commentText.length;\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsSubmitted(true);\n\n    if (formIsValid) {\n      setCommentText('');\n      setIsSubmitted(false);\n      createComment(name, email, commentText);\n    }\n  };\n\n  const clearForm = () => {\n    setIsSubmitted(false);\n    setName('');\n    setEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': nameFieldError },\n            )}\n            value={name}\n            onChange={event => setName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {nameFieldError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {nameFieldError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emailFieldError },\n            )}\n            value={email}\n            onChange={event => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {emailFieldError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {emailFieldError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': commentTextFieldError },\n            )}\n            value={commentText}\n            onChange={event => setCommentText(event.target.value)}\n          />\n        </div>\n        {commentTextFieldError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': loadingNewComment },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n  comments: Comment[];\n  loadingComments: boolean;\n  commentsLoadingError: boolean;\n  formIsVisible: boolean;\n  showForm: () => void;\n  createComment: (name: string, email: string, commentText: string) => void;\n  loadingNewComment: boolean,\n  removeComment: (commentId: number) => void;\n  deletingCommentsID: number[];\n};\n\nexport const PostDetails: React.FC<Props> = (\n  {\n    post,\n    comments,\n    loadingComments,\n    commentsLoadingError,\n    formIsVisible,\n    showForm,\n    createComment,\n    loadingNewComment,\n    removeComment,\n    deletingCommentsID,\n  },\n) => {\n  const { title, body } = post;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loadingComments ? (\n            <Loader />\n          ) : (\n            <>\n              {commentsLoadingError ? (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              ) : (\n                <>\n                  {comments.length === 0 ? (\n                    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                      No comments yet\n                    </p>\n                  ) : (\n                    <>\n                      <p className=\"title is-4\">Comments:</p>\n                      {comments.map(comment => (\n                        <article\n                          key={comment.id}\n                          className={classNames(\n                            'message is-small',\n                            {\n                              'is-deleting':\n                                deletingCommentsID.includes(comment.id),\n                            },\n                          )}\n                          data-cy=\"Comment\"\n                        >\n                          <div className=\"message-header\">\n                            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                              {comment.name}\n                            </a>\n                            <button\n                              data-cy=\"CommentDelete\"\n                              type=\"button\"\n                              className=\"delete is-small\"\n                              aria-label=\"delete\"\n                              onClick={() => removeComment(comment.id)}\n                            >\n                              delete button\n                            </button>\n                          </div>\n\n                          <div className=\"message-body\" data-cy=\"CommentBody\">\n                            {comment.body}\n                          </div>\n                        </article>\n                      ))}\n                    </>\n                  )}\n                  {formIsVisible ? (\n                    <NewCommentForm\n                      createComment={createComment}\n                      loadingNewComment={loadingNewComment}\n                    />\n                  ) : (\n                    <button\n                      data-cy=\"WriteCommentButton\"\n                      type=\"button\"\n                      className=\"button is-link\"\n                      onClick={showForm}\n                    >\n                      Write a comment\n                    </button>\n                  )}\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onSelect: (user: User) => void;\n  selectedUser: User | null;\n  fetchPosts: (userId: number) => void;\n  usersIsLoaded: boolean;\n};\n\nexport const UserSelector: React.FC<Props> = (\n  {\n    users, onSelect, selectedUser, fetchPosts, usersIsLoaded,\n  },\n) => {\n  const [showUsers, setShowUsers] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': showUsers },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setShowUsers(currentValue => !currentValue)}\n          disabled={!usersIsLoaded}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser === user },\n              )}\n              onClick={() => {\n                onSelect(user);\n                fetchPosts(user.id);\n                setShowUsers(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (data: any) => {\n  return client.post('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { addComment, deleteComment, getComments } from './api/comments';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loadingPosts, setLoadingPosts] = useState(false);\n  const [loadingComments, setLoadingComments] = useState(false);\n  const [loadingNewComment, setLoadingNewComment] = useState(false);\n  const [\n    deletingCommentsID, setDeletingCommentsID,\n  ] = useState<number[]>([]);\n  const [postsLoadingError, setPostsLoadingError] = useState(false);\n  const [commentsLoadingError, setCommentsLoadingError] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [formIsVisible, setFormIsVisible] = useState(false);\n\n  const usersIsLoaded = users.length !== 0;\n\n  useEffect(() => {\n    async function fetchUsers() {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    }\n\n    fetchUsers();\n  }, []);\n\n  const fetchPosts = async (userId: number) => {\n    setPostsLoadingError(false);\n    setLoadingPosts(false);\n    try {\n      const loadedPosts = await getPosts(userId);\n\n      setLoadingPosts(true);\n      setPosts(loadedPosts);\n    } catch (e) {\n      setLoadingPosts(true);\n      setPostsLoadingError(true);\n    }\n  };\n\n  const fetchComments = async (postId: number) => {\n    setCommentsLoadingError(false);\n    setLoadingComments(true);\n    try {\n      const loadedComments = await getComments(postId);\n\n      setComments(loadedComments);\n    } catch {\n      setCommentsLoadingError(true);\n    }\n\n    setLoadingComments(false);\n  };\n\n  const selectUser = (user: User) => {\n    setSelectedPost(null);\n    setSelectedUser(user);\n  };\n\n  const selectPost = (post: Post) => {\n    setFormIsVisible(false);\n\n    if (post === selectedPost) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n      fetchComments(post.id);\n    }\n  };\n\n  const showForm = () => {\n    setFormIsVisible(true);\n  };\n\n  const createComment = async (\n    name: string, email: string, commentText: string,\n  ) => {\n    setLoadingNewComment(true);\n    const newComment = {\n      postId: selectedPost ? selectedPost.id : 0,\n      name,\n      email,\n      body: commentText,\n    };\n\n    try {\n      const response = await addComment(newComment);\n      const responseComment = JSON.parse(JSON.stringify(response));\n\n      const addedComment = {\n        id: responseComment.id,\n        postId: responseComment.postId,\n        name: responseComment.name,\n        email: responseComment.email,\n        body: responseComment.body,\n      };\n\n      setComments(current => [...current, addedComment]);\n    } catch {\n      setCommentsLoadingError(true);\n      setTimeout(() => setCommentsLoadingError(false), 2000);\n    }\n\n    setLoadingNewComment(false);\n  };\n\n  const removeComment = async (commentId: number) => {\n    setDeletingCommentsID(current => [...current, commentId]);\n    try {\n      await deleteComment(commentId);\n      setComments(\n        current => current.filter(comment => comment.id !== commentId),\n      );\n    } catch (e) {\n      setCommentsLoadingError(true);\n      setTimeout(() => setCommentsLoadingError(false), 2000);\n    }\n\n    setDeletingCommentsID(current => current.filter(id => id !== commentId));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onSelect={selectUser}\n                  fetchPosts={fetchPosts}\n                  usersIsLoaded={usersIsLoaded}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser ? (\n                  <>\n                    {!loadingPosts && <Loader />}\n                    {postsLoadingError ? (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    ) : (\n                      <>\n                        {loadingPosts && (\n                          <>\n                            {posts.length === 0 ? (\n                              <div\n                                className=\"notification is-warning\"\n                                data-cy=\"NoPostsYet\"\n                              >\n                                No posts yet\n                              </div>\n                            ) : (\n                              <PostsList\n                                posts={posts}\n                                selectPost={selectPost}\n                                selectedPost={selectedPost}\n                              />\n                            )}\n                          </>\n                        )}\n                      </>\n                    )}\n                  </>\n                ) : (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success\">\n              {selectedPost !== null && (\n                <PostDetails\n                  post={selectedPost}\n                  comments={comments}\n                  loadingComments={loadingComments}\n                  commentsLoadingError={commentsLoadingError}\n                  formIsVisible={formIsVisible}\n                  showForm={showForm}\n                  createComment={createComment}\n                  loadingNewComment={loadingNewComment}\n                  removeComment={removeComment}\n                  deletingCommentsID={deletingCommentsID}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}